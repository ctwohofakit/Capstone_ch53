"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from dotenv import load_dotenv
from pathlib import Path
import os
import openai
import certifi
import environ
import dj_database_url
from environs import Env



load_dotenv()
os.environ["SSL_CERT_FILE"]=certifi.where()
#load env file
env = Env()
env.read_env()



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_ROOT = BASE_DIR / "media"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")
RECAPTCHA_SECRET_KEY =env.str("RECAPTCHA_SECRET_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY    = env.str('GOOGLE_OAUTH_CLIENT_ID')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env.str('GOOGLE_OAUTH_CLIENT_SECRET')




# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)
if DEBUG:
    # Local SQLite
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    import dj_database_url


ALLOWED_HOSTS = ["127.0.0.1","localhost",".herokuapp.com","preppoint.us","www.preppoint.us",]
OPENAI_API_KEY = env.str("OPENAI_API_KEY")

# Application definition

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "whitenoise.runserver_nostatic",
    'django.contrib.staticfiles',

    #app
    'pages',
    'interview',
    'accounts',

    #allauth
    'social_django',

    'storages',

]


#suppose to use 1, but there was prefine site, example.com 2
# SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',

]
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

ROOT_URLCONF = 'config.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [str(BASE_DIR.joinpath("templates"))],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                #soical login
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases



DATABASES = {
    "default": dj_database_url.config(
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        conn_max_age=600,
        ssl_require=False
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL='/media/'
MEDIA_ROOT=os.path.join(BASE_DIR, 'media')
STATIC_ROOT=os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS=[os.path.join(BASE_DIR,'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#Email configuration
EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  
EMAIL_PORT=587
EMAIL_USE_SSL=False
EMAIL_USE_TLS=True
EMAIL_HOST_USER=env('SMTP_EMAIL')
EMAIL_HOST_PASSWORD=env('SMTP_PASS')


LOGIN_URL= 'login'
#for redirection after login
LOGIN_REDIRECT_URL="/interview/list/"
LOGOUT_REDIRECT_URL="/"

#for redirection if user try to re-signup and has the account
SOCIAL_AUTH_LOGIN_REDIRECT_URL="/interview/list/"

#for new signup user using social login, redirect page
SOCIAL_AUTH_NEW_USER_REDIRECT_URL="/interview/list/"

AUTH_USER_MODEL="accounts.Account"
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
    }
}

# ACCOUNT_USER_MODEL_USERNAME_FIELD = None
# ACCOUNT_LOGIN_METHODS   = ["email"]
# ACCOUNT_SIGNUP_FIELDS   = ["email*", "password1*", "password2*"]
# ACCOUNT_EMAIL_VERIFICATION = 'none'

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",           
    'social_core.backends.google.GoogleOAuth2',
]


# SOCIALACCOUNT_LOGIN_ON_GET=True
# ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True


#s3
AWS_ACCESS_KEY_ID=env("AWS_KEY")

AWS_SECRET_ACCESS_KEY=env("AWS_SECRET")

AWS_STORAGE_BUCKET_NAME=env("BUCKET")

AWS_S3_REGION_NAME="us-east-2"

AWS_QUERYSTRING_AUTH=False

 

#DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

MEDIA_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/"

 

AWS_S3_FILE_OVERWRITE = False

AWS_DEFAULT_ACL = "public-read"

 

STORAGES = { 

    "default": {

        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",

    },    

    "staticfiles": {

        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",

    },

}

# STORAGES = {
#   'default': {
#     'BACKEND': 'django.core.files.storage.FileSystemStorage',
#     'OPTIONS': {'location': MEDIA_ROOT},
#   },
#   'staticfiles': {
#     'BACKEND': 'whitenoise.storage.CompressedManifestStaticFilesStorage',
#   },
# }